// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header should match snapshot with all correct data passed through 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          id="people"
          onClick={[Function]}
        >
           People 
        </button>,
        <button
          id="planets"
          onClick={[Function]}
        >
           Planets 
        </button>,
        <button
          id="vehicles"
          onClick={[Function]}
        >
           Vehicles 
        </button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": " People ",
          "id": "people",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": " People ",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": " Planets ",
          "id": "planets",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": " Planets ",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": " Vehicles ",
          "id": "vehicles",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": " Vehicles ",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            id="people"
            onClick={[Function]}
          >
             People 
          </button>,
          <button
            id="planets"
            onClick={[Function]}
          >
             Planets 
          </button>,
          <button
            id="vehicles"
            onClick={[Function]}
          >
             Vehicles 
          </button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " People ",
            "id": "people",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": " People ",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " Planets ",
            "id": "planets",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": " Planets ",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " Vehicles ",
            "id": "vehicles",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": " Vehicles ",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
